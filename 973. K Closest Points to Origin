class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& P, int k) {
        auto euclidean = [](auto& p) { 
            return p[0] * p[0] + p[1] * p[1]; 
        };
        sort(begin(P), end(P), [&](auto& a, auto& b){
            return euclidean(a) < euclidean(b); });
        P.resize(k);
        return P;
    }
};

Sol2: Python-
# Basic Sorting Solution
def kClosest_sorting(points, k):
    # Sort points by their squared Euclidean distance from the origin
    return sorted(points, key=lambda point: point[0]**2 + point[1]**2)[:k]
