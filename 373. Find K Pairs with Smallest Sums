class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& num1, vector<int>& num2, int k) {
      vector<vector<int>> ans;
        if (num1.empty() || num2.empty() || k == 0) {
            return ans;
        }

        // Min-heap
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<>> pq;

        // Push the initial pairs {num1[i] + num2[0], {i, 0}} into the heap
        for (int i = 0; i < num1.size() && i < k; ++i) {
            pq.push({num1[i] + num2[0], {i, 0}});
        }

        // Extract the smallest pairs from the heap
        while (k-- > 0 && !pq.empty()) {
            auto current = pq.top();
            pq.pop();
            int i = current.second.first;
            int j = current.second.second;
            ans.push_back({num1[i], num2[j]});
            if (j + 1 < num2.size()) {
                pq.push({num1[i] + num2[j + 1], {i, j + 1}});
            }
        }

        return ans;
    }
};
