class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int num : nums) {
            sum += num;
        }
        
        // If the total sum is odd, it cannot be partitioned into two equal subsets
        if(sum % 2 != 0) return false;
        
        int target = sum / 2;
        int n = nums.size();
        
        // DP array to store if a subset sum is possible
        vector<bool> dp(target + 1, false);
        dp[0] = true; // Base case: a subset sum of 0 is always possible
        
        for(int num : nums) {
            for(int j = target; j >= num; --j) {
                dp[j] = dp[j] || dp[j - num];
            }
        }
        
        return dp[target];
    }
};
