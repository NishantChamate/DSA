class Solution {
public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if (!root) return false; // If root is null, return false
        // Check if the current subtree starting from root is identical to subRoot
        if (isIdentical(root, subRoot)) return true;
        // Recursively check if subRoot is a subtree of the left or right subtree of root
        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);
    }
    
    // Helper function to check if two trees are identical
    bool isIdentical(TreeNode* s, TreeNode* t) {
        if (!s && !t) return true; // If both s and t are null, they are identical
        if (!s || !t) return false; // If one of s or t is null but not both, they are not identical
        // Check if the current nodes are identical and recursively check their left and right subtrees
        return s->val == t->val && isIdentical(s->left, t->left) && isIdentical(s->right, t->right);
    }
};
