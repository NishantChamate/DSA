class Solution {
public:
    int minKBitFlips(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> flip(n, 0); // to track the flip operations
        int flips = 0; // number of flips in the current window
        int result = 0; // number of flip operations performed
        
        for (int i = 0; i < n; ++i) {
            if (i >= k) {
                // If we've moved past the range of a flip, remove its effect
                flips ^= flip[i - k];
            }
            // If the current bit needs to be flipped to become 1
            if ((nums[i] ^ flips) == 0) {
                // If we can't flip k bits starting from here, return -1
                if (i + k > n) return -1;
                
                // Perform a flip operation starting from the current position
                flips ^= 1;
                flip[i] = 1; // mark the start of a flip
                result++;
            }
        }
        
        return result;
    }
};
